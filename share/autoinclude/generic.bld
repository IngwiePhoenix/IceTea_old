// Assigning the rough tools.
//    requires getMakeDeps("${CXX} ${CXXFLAGS} -M -MG ${INPUT}");
if OS() == "win" then {
	if WHICH == null then { WHICH = "where"; }
	if CC == null then { CC = "cl.exe"; }
	if CXX == null then { CXX = "cl.exe"; }
	if LINK == null then { LINK = "link.exe"; }
	if LIB == null then { LIB = "lib.exe"; }
	IS_GNU="no";
} else {
	if WHICH == null then { WHICH = "which"; }
	if CC == null then { CC = "gcc"; }
	if CXX == null then { CXX = "g++"; }
	if LINK == null then { LINK = "ld"; }
	if LIB == null then { LIB = "ar"; }
	IS_GNU="yes";
}

// Define file extensions
if OS() == "win" then {
	SHLIB_EXT = "dll";
	OBJ_EXT = "*.obj";
	ASM_EXT1 = "*.asm";
	ASM_EXT2 = "*.asm";
} else if OS() == "mac" then {
	SHLIB_EXT = "dylib";
	OBJ_EXT = "*.o";
	ASM_EXT1 = "*.S";
	ASM_EXT2 = "*.s";
} else {
	SHLIB_EXT = "so";
	OBJ_EXT = "*.o";
	ASM_EXT1 = "*.S";
	ASM_EXT2 = "*.s";
}

// Misc stuff
if BISON == null then { BISON = "bison"; }
if FLEX == null then { FLEX = "flex"; }

function lib(lname) {
	if IS_GNU == "yes" then {
		return INPUT+" -l"+name;
	} else {
		// Appearently, you only need to specify the .lib file...
		return INPUT+" lib"+name;
	}
}
function lib_dir(dir) {
	if IS_GNU == "yes" then {
		return INPUT+" -L"+dir;
	} else {
		return INPUT+"  /LIBPATH:"+dir;
	}
}
function inc_dir(dir) {
	if IS_GNU == "yes" then {
		return INPUT+" -I"+dir;
	} else {
		return INPUT+" /I "+dir;
	}
}

/*	if IS_GNU == "yes" then {
	} else {
	}
*/
// Checkers.
function has_tool(t) {
	return execute_quiet(WHICH + " " + t);
}

function has_lib(library) {
	fh = open("./.tmp.c","w");
	fh.write("int main(void){ return 0; }");
	fh.close();
	instr = "${CC} ${LDFLAGS} ./.tmp.c -o ./.tmp.out";
	instr = instr.lib(library);
	rt = execute_quiet(instr);
	unlink("./.tmp.c");
	unlink("./.tmp.out");
	return rt;
}

function has_header(header) {
	fh = open("./.tmp.c","w");
	fh.write("#include <" + header + ">\n");
	fh.write("int main(void){ return 0; }");
	fh.close();
	instr = "${CC} ${CFLAGS} ./.tmp.c -o ./.tmp.out";
	rt = execute_quiet(instr);
	unlink("./.tmp.c");
	unlink("./.tmp.out");
	return rt;
}

function has_function(fnc, header, library) {
	fh = open("./.tmp.c","w");
	fh.write("#include <" + header + ">\n");
	fh.write("int main(void){ if(&" + fnc + " != NULL) return 2; }");
	fh.close();
	instr = "${CC} ${CFLAGS} -c ./.tmp.c -o ./.tmp.o";
	instr = instr.lib(library);
	rt = execute_quiet(instr);
	unlink("./.tmp.c");
	unlink("./.tmp.o");
	return rt;
}

// Change file extension
function objectify() {
	if IS_GNU == "yes" then {
		return INPUT+".o";
	} else {
		return INPUT+".obj";
	}
}

/*
	Defining "finals".
*/
rule "exe" {
	display "Executable";
    input matches(OBJ_EXT);
    profile "build" {
        execute("${CXX} -o ${OUTPUT} ${INPUT} ${LDFLAGS}");
    }
}
rule "so" {
	display "Shared object";
    input matches(OBJ_EXT);
    profile "build" {
        execute("${CXX} -shared -o ${OUTPUT} ${INPUT} ${LDFLAGS}");
    }
}
rule "lib" {
	display "Static library";
    input matches(OBJ_EXT);
    profile "build" {
        execute("${LIB} cr ${OUTPUT} ${INPUT}");
    }
}

/*
	Source file processing
*/
rule "c++" {
	display "C++";
    input matches("*.cc", "*.cxx", "*.c++", "*.cpp");
    output INPUT.objectify();
    profile "build" {
        execute("${CXX} ${CXXFLAGS} -c -o ${OUTPUT} ${INPUT}", "g++");
    }
}
rule "c" {
	display "C";
    input matches("*.c", "*.C");
    output INPUT.objectify();
    profile "build" {
        execute("${CC} ${CFLAGS} -c -o ${OUTPUT} ${INPUT}");
    }
}
rule "asm" {
	display "Assembly";
	input matches(ASM_EXT1, ASM_EXT2); // It is different on the OSes...
    output INPUT.objectify();
    profile "build" {
        execute("${CC} -c ${INPUT} -o ${OUTPUT}");
    }
}

/*
	Generators for scanners and the like.
*/
rule "bison" {
	display "YACC (bison)";
    input "*.y";
    output [INPUT.regex("\\.y$", ".tab.c"), INPUT.regex("\\.y$", ".tab.h")];
    profile "build" {
        BASE = INPUT.regex("\\.y", "");
        execute("${BISON} -b${BASE} ${BISONFLAGS} ${INPUT}");
        // if you add a -v bison will produce a .output file
    }
}
rule "flex" {
	display "Lex (flex)";
    input "*.l";
    output INPUT.regex("\\.l$", ".yy.c");
    output INPUT.regex("\\.l$", ".yy.h");
    profile "build" {
        execute("${FLEX} ${FLEXFLAGS} ${INPUT}");
    }
}

// ObjC is enabled.
if OS() == "mac" then {
	// Compile steps
	rule "obj-c" {
		display "Objective-C";
   		input "*.m";
    	output INPUT.objectify();
   		profile "build" {
    	   	execute("${CC} -x objective-c ${CFLAGS} ${OBJCFLAGS} -c ${INPUT} -o ${OUTPUT}", "clang");
   		}
	}
	rule "obj-cxx" {
		display "Objective-C++";
	   	input "*.mm";
    	output INPUT.objectify();
   		profile "build" {
    	   	execute("${CXX} -x objective-c++ ${CXXFLAGS} ${OBJCXXFLAGS} -c ${INPUT} -o ${OUTPUT}", "clang++");
   		}
	}
	// Final
	rule "dylib" {
		display "Dynamic library";
		input "*.o";
		profile "build" {
			execute("${CXX} -dynamiclib ${LDFLAGS} -o ${OUTPUT} ${INPUT}");
		}
	}
}

# This is for OS X.
/*if OS() == "mac" then {
	rule "versioned_framework" {
		input "*.dylib";
		profile "build" {
			# Need to do this one here.
			if resource_path == null then { warning "No resources specified!"; }
			if header_path == null then { warning "No headers specified!"; }
			if info_plist == null then { warning "No Info.plist specified!"; }
			framework_name = OUTPUT.replace(".framework","");
			#mkdirp(OUTPUT + "/Versions/A/");
			#mkdir(OUTPUT + "/Versions/A/Resources");
			#mkdir(OUTPUT + "/Versions/A/Header");
			if info_plist != null then {
				copy(info_plist, OUTPUT + "/Versions/A/Resources/Info.plist");
			}
			if resource_path != null then {
				copy(resource_path, OUTPUT + "/Versions/A/Resources");
			}
			copy(INPUT, OUTPUT +  "/Versions/A/" + framework_name);
			execute("cd \"$(OUTPUT)\" && ln -s \"./Versions/A/${framework_name}\" \"${framework_name}\"");
			execute("cd \"$(OUTPUT)\" && ln -s \"./Versions/A/Resources\" Resources");
			execute("cd \"$(OUTPUT)\" && ln -s \"./Versions/A/Header\" Header");
		}
		profile "clean" {
			execute("rm -rf \"${OUTPUT}\"");
		}
		profile "install" {
			execute("cp \"${OUTPUT}\" /Library/Frameworks");
		}
	}
	rule "unversioned_Framework" {
		input "*.dylib";
		profile "build" {
			#mkdirp(OUTPUT);
			copy(INPUT, OUTPUT + "/" + fileName(INPUT).replace(".dylib",""));
			if resources_path != null then { copy(resources_path, OUTPUT + "/Resources"); }
			if header_path != null then { copy(header_path, OUTPUT + "/Headers"); }
			if info_plist != null then { copy(info_plist, OUTPUT + "/Info.plist"); }
		}
		profile "clean" {
			execute("rm -rf \"${OUTPUT}\"");
		}
		profile "install" {
			execute("cp \"${OUTPUT}\" /Library/Frameworks");
		}
	}
}*/
